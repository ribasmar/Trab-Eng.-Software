import os
import json
import datetime
import random

# Constantes
DATE_RANGE_START = datetime.date(2025, 5, 22)
DATE_RANGE_END = datetime.date(2025, 6, 6)

def get_cardapio_path():
    """Retorna o caminho completo para o arquivo de card√°pio"""
    return os.path.join(os.path.dirname(__file__), "data", "cardapio.json")

def gerar_data_aleatoria():
    """Gera uma data aleat√≥ria dentro do intervalo definido."""
    delta = (DATE_RANGE_END - DATE_RANGE_START).days
    return DATE_RANGE_START + datetime.timedelta(days=random.randint(0, delta))

def gerar_cardapio_padrao():
    """Gera um card√°pio padr√£o caso n√£o exista"""
    path = get_cardapio_path()
    dias_semana = ["segunda", "ter√ßa", "quarta", "quinta", "sexta", "s√°bado"]
    pratos = [
        "Arroz, feij√£o, bife acebolado, salada verde",
        "Macarr√£o ao sugo, frango grelhado, legumes cozidos",
        "Strogonoff de frango, arroz, batata palha, cenoura ralada",
        "Feijoada, arroz, couve refogada, laranja",
        "Escondidinho de carne, arroz integral, beterraba",
        "Peixe empanado, pur√™ de batata, arroz, salada de alface",
        "Lasanha de legumes, arroz, br√≥colis no vapor",
        "Risoto de frango, salada de r√∫cula, p√£o de alho",
        "Torta salgada, arroz branco, salada de repolho",
        "Carne de panela, mandioca cozida, arroz, vinagrete"
    ]

    cardapio = {}
    for dia in dias_semana:
        cardapio[dia] = {
            "almo√ßo": random.choice(pratos)
        }
        if dia != "s√°bado":
            cardapio[dia]["jantar"] = random.choice(pratos)

    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(cardapio, f, indent=4, ensure_ascii=False)

def garantir_cardapio_json():
    """Garante que o arquivo JSON de card√°pio existe ou cria um novo."""
    path = get_cardapio_path()
    if not os.path.exists(path):
        gerar_cardapio_padrao()

def carregar_cardapio():
    """Carrega o card√°pio do arquivo JSON"""
    path = get_cardapio_path()
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def mostrar_cardapio(data):
    """Retorna o card√°pio formatado para a data especificada"""
    try:
        if not (DATE_RANGE_START <= data <= DATE_RANGE_END):
            return {
                "sucesso": False,
                "mensagem": "Fora do per√≠odo de exibi√ß√£o de card√°pio (22/05 a 06/06)."
            }

        dias_semana_pt = ["segunda", "ter√ßa", "quarta", "quinta", "sexta", "s√°bado", "domingo"]
        dia_num = data.weekday()
        dia_semana = dias_semana_pt[dia_num]

        cardapio = carregar_cardapio()

        if dia_semana not in cardapio:
            return {
                "sucesso": True,
                "mensagem": "RU fechado hoje (domingo ou feriado)."
            }

        refeicoes = cardapio[dia_semana]
        formatted = [
            f"üìÖ Card√°pio - {data.strftime('%d/%m/%Y')}",
            f"üìå {dia_semana.capitalize()}-feira",
            ""
        ]
        
        for tipo, menu in refeicoes.items():
            formatted.append(f"üçΩÔ∏è {tipo.capitalize()}:")
            formatted.append(f"   {menu}")
            formatted.append("")

        return {
            "sucesso": True,
            "mensagem": "\n".join(formatted).strip()
        }

    except Exception as e:
        return {
            "sucesso": False,
            "mensagem": f"‚ö†Ô∏è Erro ao carregar card√°pio:\n{str(e)}"
        }